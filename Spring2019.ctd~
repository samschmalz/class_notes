<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="HIST251" prog_lang="plain-text" readonly="False" tags="" ts_creation="1548170769.18" ts_lastsave="1548170769.18" unique_id="1">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Jan 22" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1548170783.82" ts_lastsave="1548344330.02" unique_id="2">
			<rich_text>• need the book for McGraw Hill code
   ◇ 1-800-331-5094
   ◇ McGraw Hill support number
• Digital Syllabus online

Point Breakdown:
• 140 pts - weekly reading
• 105 pts - primary sources
• 100 pts - exam 1
• 100 pts - exam 2
• 100 pts - final exam
• 100 pts - final exam essay
• 645 pts - total

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Jan 24" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1548344330.02" ts_lastsave="1548775698.47" unique_id="5">
			<rich_text>Previous historical records
• very biased
• ignore existence of native populations
• keep in mind who they're written by - the Europeans who landed here

Flora/Fauna
• pre-human North America had great species diversity
• climate is more like the sahara or serengeti
• many large/giant animal species
• horses were originally native to NA, but died off

First Humans in NA
• 35,000 - 50,000 years ago
• likely that some people arrived by boat before the Bering land bridge
• land bridge around 35k years ago
• around 10k years ago, domesticated crops created
   ◇ beans, squash, gourds first
   ◇ cotton, corn, pottery around 5k years ago
   ◇ early diets were heavy in corn, causing Niacin deficiencies
      ▪ natives didn't know what they were missing, but fixed with lime from stone

Olmecs
• “mother culture”
   ◇ 1900-1500 BCE
• create first cities
   ◇ leads to social heirarchies, leisure classes, art, etc.
   ◇ more specialization in roles
• created religious sites
   ◇ had distinct priest class

Mayans
• 750 BC
   ◇ last city conquered by the Spanish in 1697 CE
• first known heiroglyphic writing
   ◇ used to write codices with history and info about daily life
   ◇ many writings burned by the Spanish
• Came up with concept of 0
   ◇ incredibly important mathematical concept
   ◇ allows for large-scale math
• used calendar called Tzolkin

Aztecs
• 1325-1521 CE
• capital city called Tenochititlan
   ◇ rivals almost every Roman city built, but in less than 200 years
   ◇ used arches and aqueducts
• built floating terraces to grow food
• had several enemies
   ◇ large empires are rarely built entirely on peace

Inca
• 1438-1525 CE
• largest empire in pre-Colombian America
• built empire in mountains
   ◇ creates new challenges for agriculture and travel
   ◇ developed extensive roads and mountain farming systems
      ▪ over 12,000 miles of roads
• most artwork destroyed by Spanish

Continental US Natives
• Cahokia, IL - mound builders
   ◇ generic term
   ◇ culture lacked writing, hard to learn from
   ◇ may have been one group or multiple groups
• Mesa Verde, CO - Anasazi
   ◇ built houses into the sides of rock mesas
   ◇ used pictograms for writing
      ▪ not as precise as proper writing</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Exploration and Empire in South America" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1548775698.48" ts_lastsave="1548952074.67" unique_id="7">
			<rich_text>How did colonialism begin?
• </rich_text>
			<rich_text underline="single">colonialism</rich_text>
			<rich_text> - the conquest and control of other people's land and goods with ties to the parent state
• Out of the Ashes
   ◇ Plague (1347-1351)
      ▪ 60% death rate
• redistribution of wealth
   ◇ chinese gunpowder

Age of Exploration
• new technology makes sailing easier
   ◇ lanteen sails
• Portugal
   ◇ Prince Henry the Navigator
   ◇ Bartholomeu Dias
   ◇ Vasco de Gama
   ◇ Plantation systems
• Spain
   ◇ Rulers: Ferdinand and Isabella
   ◇ Christopher Colombus
      ▪ already knew that world is </rich_text>
			<rich_text underline="single">not</rich_text>
			<rich_text> flat
      ▪ thinks he can make it to India by going west
         - thought world is smaller than it really is
   ◇ Pope Alexander VI
      ▪ set demarcation lines to divide control between Spain and Portugal
      ▪ tells both nations to spread Catholicism

God, Gold, and Glory
• Cortes conquers Mexico, 1519-1521
• Pizarro conquers Peru, 1532-1534
• Queen Isabella funds expeditions
   ◇ King Ferdinand focused more on extracting wealth
   ◇ Queen had more focus on spreading Catholic beliefs
• Conquistadors
   ◇ motivated by stories of cities of gold
   ◇ gold was given as welcome gift or tribute
      ▪ tribes thought it owuld cause Spanish to go away
   ◇ Spanish thought there would be more gold available
   ◇ Encomienda system
      ▪ gift of land to particular conquistador once area has been conquered
      ▪ later became un-inheritable, removing motivation to care for land
         - much more limited time, want to take all they can
• Bartolome de Las Casas
   ◇ saddened by the current state of the conquest
      ▪ de Las Casas is more motivated by God, saddened by lust for gold
   ◇ becomes priest and tries to convert natives
   ◇ returns to Spain and asks for limits on how conquistadors can act
      ▪ Ferdinand disagrees
   ◇ Creates repartimiento system


Spain Superimposed
• conquest keeps going
   ◇ take over cities, temples, buildings, etc
   ◇ Incan road system already in place
• caste system created


Spain in North America
• bulk of Spanish influence is in southern regions
• Had some influence in continental US
   ◇ Florida (1513)
      ▪ established as military base
      ▪ ships could stop to resupply between Spain and Mexico
   ◇ New Mexico (1598)
      ▪ Acoma Pueblo
      ▪ natives tried to push back, Spanish responded more violently
• Assumed that people would stay after conquest


France: Fish, Fur, and Faith
• more commercial venture than Spanish
   ◇ most people coming through are explorers, traders, and trappers
• looking for Northwest Passage that will take people through North America
   ◇ still trying to get to the East Indies
• Developed “Middle Ground”
   ◇ alliance with Algonquin people
   ◇ mutual and reciprocal relationship
   ◇ French relied more on native guides
   ◇ intermarriage became common among French
      ▪ no French societies to emulate, often became part of indiginous populations
      ▪ would sometimes just go back to France and abandon native wives
• Much smaller population of explorers
   ◇ about 3000 people in entire Louisiana purchase and French Canada


Dutch Exploration
• Still looking for Northwest Passage
   ◇ led to fame of Henry Hudson, who explored the Hudson river
• New Amsterdam
   ◇ purchased rather than conquered
      ▪ paid native peoples in the area for the land
      ▪ probably didn't pay what the land was worth
   ◇ eventually sold to the Duke of York, became New York eventually
• Diverse settlement


Where were the English?
• most likely due to political and religious turmoil
• Mercantilism caused more turmoil
   ◇ balance of wealth in Europe was shifting dramatically


Dissent Abroad and Within
• England worried about spain
   ◇ commonly fight between the two nations
   ◇ both sides employed privateers
   ◇ Queen Elizabeth sends Sir Walter Raleigh
      ▪ searches for realm of El Dorado
• Defeat of Spanish Armada
   ◇ bad weather causes armada to go down
   ◇ Spain loses ability to defend itself

Founding Virginia
• Virginia company
   ◇ founded Jamestown in 1607
   ◇ created expedition of 104 settlers
      ▪ includes a lot of goldsmiths and jewelers
      ▪ majority men
• John Smith
• Powhatan Confederacy
• Pocahontas
   ◇ Disney movie presents it as love story between Pocahontas and John Smith
   ◇ Reality is different
      ▪ Pocahontas was likely around 11 or 12
      ▪ John Smith was closer to 30
      ▪ Possibly a setup by Powhatan to demonstrate mercy without losing power
• John Rolfe
   ◇ Pocahontas is contractually required to marry to earn freedom
      ▪ Pocahontas dies at age of 21-ish
      ▪ away from friends and family
      ▪ using the name “Rebecca”
   ◇ later introduces tobacco to Virginia
      ▪ the one resource England had that was sellable</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="CIS575" prog_lang="plain-text" readonly="False" tags="" ts_creation="1548275231.51" ts_lastsave="1548275231.51" unique_id="3">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Introduction" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1548275242.38" ts_lastsave="1548707832.88" unique_id="4">
			<rich_text>Specifications
• problem is specified with a contract
   ◇ given input satisfying a </rich_text>
			<rich_text style="italic">precondition</rich_text>
			<rich_text>
   ◇ given output satisfying a </rich_text>
			<rich_text style="italic">postcondition</rich_text>
			<rich_text>
• Example: informal contract (with x, y ints)
   ◇ return in y the square root of x
   ◇ Exercise: formalize this!

PRE: x &gt;= 0, x integer
POST: y</rich_text>
			<rich_text scale="sup">2</rich_text>
			<rich_text> &lt;= x, y integer, (y+1)</rich_text>
			<rich_text scale="sup">2</rich_text>
			<rich_text> &gt; x, </rich_text>
			<rich_text strikethrough="true">y &gt;= 0</rich_text>
			<rich_text>
• y &gt;= 0 is made redundant by (y+1)</rich_text>
			<rich_text scale="sup">2</rich_text>
			<rich_text> &gt; x


Implementation
• the task of an algorithm
   ◇ described in a standard programming language
      ▪ no library functions
   ◇ uses osme time and space, which should be minimized
• Example: return in y the integer square root of x
   ◇ naive algorithm takes time proportional to y
   ◇ but exists algorithm based on binary search that takes time proportional to the logarithm of y


Sorting
• commonly-analyzed algorithm category
• has specification:
   ◇ PRE: Array A[1..n] of numbers
      ▪ or something with a total order
   ◇ POST: A[1..n] is non-decreasing
      ▪ ∀i ∀j (1 &lt;= i &lt;= j &lt;= n ⇒ A[i] &lt;= A[j])
      ▪ ∀i (1 &lt;= i &lt;= n-1) ⇒ A[i] &lt;= A[i+1]
• will see many sorting algorithms
   ◇ typically run in n lg(n)
   ◇ some run in time proportional to n
      ▪ if extra assumptions
   ◇ some run in time proportional to n</rich_text>
			<rich_text scale="sup">2</rich_text>
			<rich_text>

Selection
• specifications
   ◇ PRE: Array a[1..n] of numbers, k with k ∈ 1...n
   ◇ POST: return the kth smallest element of A
• Q: may A be modified?
   ◇ A1: No (default for specification)
   ◇ A2: yes, but only by permutation
• Q: what does “x is kth smallest” mean?
   ◇ there are (k-1) elements that are smaller than x


Top-Down Approach to Algorithms
• Reduction principle
   ◇ solve a problem by using a solution to a simpler problem
      ▪ break it down
• Simple top-down sorting
   ◇ may sort array A[1..n] as follows:
      ▪ if n &lt;= 1, then A[1..n] is already sorted


Recursive Insertion Sort
• PRE: A[1..n] is an array of numbers
• POST: A[1..n] is a permutation of its original values such that A[1..n] is non-decreasing
• </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
• Notation for passing arrays as parameters:
   ◇ pointer to the array is passed
   ◇ boundaries are specified
• Need to specify InsertLast()
   ◇ PRE: A[1..n] with n &gt;= 1 is array of numbers such that A[1..n-1] is non-decreasing
   ◇ POST: A[1..n] is permutation of its original value s.t. A[1..n] is non-decreasing
• Space Usage
   ◇ when running, the stack grows to size at least proportional to n
   ◇ can limit performance as stack space is often limited


Bottom-up computation
• can save stack space by implementing a top-down design in bottom-up fashion
   1) compute solutions to smallest instance
   2) using top-down solution as guide, combine solutions of smaller instances to obtain solutions to larger instances
• fibonacci function
   ◇ </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
   ◇ takes exponential time if computed naively
• </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
   ◇ “←” indicates value assignment to a value


Insertion Sort, Bottom-Up
• recall top-down version
   ◇ unfolds to InsertLast(A[1..2]) ... InsertLast(A[1..n])
• thus bottom-up version is:
   ◇ </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>

Insert Last Element in Proper Place
• PRE: A[1..n] with A[1..n-1] non-decreasing
• POST: A[1..n] is permutation of original values s.t. A[1..n] is non-decreasing
• </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>

Iterative Insertion Sort
• space use: constant amount of extra space is needed
   ◇ called </rich_text>
			<rich_text underline="single">in-place</rich_text>
			<rich_text>
• time use is:
   ◇ best case: linear, proportional to n
   ◇ worst case: quadratic, proportional to n</rich_text>
			<rich_text scale="sup">2</rich_text>
			<rich_text>
   ◇ average case: ???
      ▪ depends on expected input distribution</rich_text>
			<codebox char_offset="1939" frame_height="80" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">InsertionSort(A[1..n]):
    if n &gt; 1
        InsertionSort(A[1..n-1])
        InsertLast(A[1..n])</codebox>
			<codebox char_offset="2693" frame_height="45" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">fib(0) = fib(1) = 1
fib(n+2) = fib(n) + fib(n+1)</codebox>
			<codebox char_offset="2745" frame_height="85" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">fib_iter(n):
    i,j ← n
    for k ← 1 to n - 1:
        i,j ← j, i+j
    return j</codebox>
			<codebox char_offset="2942" frame_height="55" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">InsertionSort(A[1..n])
    for i ← 2 to n
        InsertLast(A[1..i])</codebox>
			<codebox char_offset="3109" frame_height="85" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">InsertLast(A[1..n])
    if n &gt; 1 and A[n] &lt; A[n-1]
        A[n] ↔ A[n-1]
        InsertLast(A[1..n-1])</codebox>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Understanding Algorithms" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1548707832.88" ts_lastsave="1549055473.79" unique_id="6">
			<rich_text>Correctness Proofs
• people do not fully understand an algorithm until they are able to prove its correctness
• therefore, we shall
   ◇ design algorithms with correctness in mind

Correctness of Iterative Algorithms
• given loop invariant, must prove
   ◇ Initialization: invariant holds before first iteration
   ◇ maintenance: if invariant holds at beginning of an iteration, must also hold at end
   ◇ termination: the loop always exits
   ◇ correctness: loop invariant, together w/ exit condition, implies desired correctness property


Iterative InsertionSort
• still rely on InsertLast
• Specification:
   ◇ PRE: A[1..n]
   ◇ POST: A[1..n] s.t. it is non-decreasing
• Loop invariant: A[1..n] is a permutation of original values s.t. A[1..i-1] is non-decreasing

InsertionSort, Inner Loop
• Spec:
   ◇ PRE: A[1..n] is an array of numbers and i with 1 &lt;= i &lt;= n s.t. A[1..i-1] is non-decreasing
   ◇ POST: A[1..n] is permutation of original values s.t. A[1..i] is non-decreasing
• code:
   ◇ </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
• Tentative invariant:
   ◇ A[1..n] is permutation of original values
   ◇ A[1..j-1] and A[j..i] are both non-decreasing
• invariant does hold, and can show
   ◇ initialization
   ◇ correctness
   ◇ but </rich_text>
			<rich_text style="italic" underline="single">not</rich_text>
			<rich_text> maintenance
• invariant is too weak
• new invariant:
   ◇ A[1..n] is a permutation of its original values s.t. for all 1 &lt;= k &lt; k' &lt;= i, if k' != j then A[k] &lt;= A[k']


Correctness of Recursive Algorithms
• Want to prove correctness of recursive function
   ◇ called with arg of “size” n
• need to analyze the body
   ◇ to keep analysis manageable must be able to assume that each subcall gives correct result
   ◇ let i be the “size” of the arg to subcall
   ◇ then expect that i &lt; n
• can tgys aooeak ti mathematical induction

Recursive FindLast
• spec
   ◇ PRE: x ∈ A[1..n] (thus n &gt;= 1)
   ◇ POST: returns p ∈ 1..n: A[p] = x ∉ A[p + 1..n]
• </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>

Recursive InsertLast
• New prove correctness of InsertLast
• spec
   ◇ PRE: A[1..n] with n &gt;= 1 is array of numbers s.t. A[1..n-1] is non-decreasing
   ◇ POST: A[1..n] is a permutation of its original values s.t. it is non-decreasing
• </rich_text>
			<codebox char_offset="997" frame_height="63" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">j ← i
while j &gt; 1 and A[j] &lt; A[j - 1]:
    A[j] ↔ A[j-1]; j ← j-1</codebox>
			<codebox char_offset="1852" frame_height="90" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">FindLast(A,n,x)
    if A[n] = x
        return n
    else
        return FindLast(A,n-1,x)</codebox>
			<codebox char_offset="2091" frame_height="60" frame_width="320" highlight_brackets="True" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">InsertLast(A[1..n])
    if n &gt; 1 and a[n] &lt; A[n-1]
        A[n] ↔ A[n-1]
        InsertLast(A[1..n-1])</codebox>
		</node>
	</node>
</cherrytree>
